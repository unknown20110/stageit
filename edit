<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>מערכת ניהול הופעות מתקדמת</title>
    <style>
 	      .chat-icon {
          position: absolute;
          top: 10px;
          right: 10px;
          background: white;
          border-radius: 50%;
          padding: 5px;
          font-size: 16px;
          box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stats-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            color: white;
            font-weight: bold;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card.pending { background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); }
        .stat-card.contacted { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); }
        .stat-card.confirmed { background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%); }
        .stat-card.closed { background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%); }

        .controls {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
            align-items: center;
        }

        .upload-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            color: white;
        }

        .file-input {
            margin: 10px 0;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(45deg, #ffeaa7, #fab1a0);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .filter-input {
            padding: 10px 15px;
            border: 2px solid #ddd;
            border-radius: 25px;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .filter-input:focus {
            border-color: #667eea;
        }

        .venues-grid {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        }

        .venue-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border-right: 5px solid #667eea;
            position: relative;
            overflow: hidden;
        }

        .venue-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1);
        }

        .venue-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .venue-card.contacted {
            border-right-color: #f39c12;
            background: linear-gradient(135deg, rgba(243,156,18,0.05) 0%, transparent 100%);
        }

        .venue-card.confirmed {
            border-right-color: #27ae60;
            background: linear-gradient(135deg, rgba(39,174,96,0.05) 0%, transparent 100%);
        }

        .venue-card.closed {
            border-right-color: #e74c3c;
            background: linear-gradient(135deg, rgba(231,76,60,0.05) 0%, transparent 100%);
        }

        .venue-name {
            font-size: 1.4em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .venue-info {
            display: grid;
            gap: 8px;
            margin-bottom: 15px;
        }

        .info-row {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #555;
        }

        .icon {
            width: 16px;
            height: 16px;
            opacity: 0.7;
        }

        .score {
            position: absolute;
            top: 15px;
            left: 15px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
        }

        .actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .status-select {
            padding: 8px 15px;
            border: 2px solid #ddd;
            border-radius: 20px;
            outline: none;
            background: white;
        }

        .message-preview {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            margin-top: 10px;
            font-size: 0.9em;
            border-right: 3px solid #667eea;
        }

        .ai-assistant {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            border-radius: 50px;
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .ai-assistant:hover {
            transform: scale(1.05);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 2000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            top: 15px;
            left: 15px;
            font-size: 24px;
            cursor: pointer;
            color: #999;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .venues-grid {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <div id="conversationModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeConversationModal()">&times;</span>
        <h2>🗣️ תיעוד שיחה</h2>
        <div id="conversationHistory" style="max-height: 200px; overflow-y: auto; background: #f1f1f1; padding: 10px; border-radius: 10px; margin-bottom: 15px;"></div>
        <textarea id="conversationText" placeholder="כתוב כאן את פרטי השיחה..." style="width: 100%; height: 100px; padding: 10px; border-radius: 10px; border: 1px solid #ccc;"></textarea>
        <br><br>
        <button class="btn btn-primary" onclick="saveConversation()">💾 שמור תיעוד</button>
      </div>
    </div>

    <div class="container">
        <h1 class="header">🎵 מערכת ניהול הופעות מתקדמת 🎵</h1>
        
        <div class="upload-section">
            <h3>📊 העלאת נתונים</h3>
            <p>העלה את קובץ ה-CSV או העתק והדבק את הנתונים מהגוגל שיטס</p>
            <input type="file" id="csvFile" accept=".csv" class="file-input">
            <div style="margin: 10px 0;">או</div>
            <button onclick="openAddVenueModal()" class="btn btn-secondary">➕ הוסף מקום ידנית</button>
            <br><br>
            <button onclick="loadData()" class="btn btn-primary">📈 טען נתונים</button>
            <button onclick="saveData()" class="btn btn-secondary">💾 שמור נתונים</button>
            <button onclick="loadSavedData()" class="btn btn-secondary">📂 טען נתונים שמורים</button>
            <button onclick="exportData()" class="btn btn-secondary">📤 ייצא CSV</button>
        </div>

        <!-- הגדרות אישיות -->
        <div class="upload-section" style="background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);">
            <h3>⚙️ הגדרות אישיות</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                <div>
                    <label style="display: block; margin-bottom: 5px;">השם שלך:</label>
                    <input type="text" id="userName" placeholder="הכנס את שמך" style="width: 100%; padding: 8px; border-radius: 5px; border: none;">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px;">מספר טלפון:</label>
                    <input type="text" id="userPhone" placeholder="הכנס מספר טלפון" style="width: 100%; padding: 8px; border-radius: 5px; border: none;">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px;">אימייל:</label>
                    <input type="email" id="userEmail" placeholder="הכנס אימייל" style="width: 100%; padding: 8px; border-radius: 5px; border: none;">
                </div>
            </div>
            <br>
            <button onclick="saveSettings()" class="btn btn-primary">✅ שמור הגדרות</button>
        </div>

        <div class="stats-dashboard">
            <div class="stat-card pending">
                <h3 id="pendingCount">0</h3>
                <p>ממתינים לפנייה</p>
            </div>
            <div class="stat-card contacted">
                <h3 id="contactedCount">0</h3>
                <p>נוצר קשר</p>
            </div>
            <div class="stat-card confirmed">
                <h3 id="confirmedCount">0</h3>
                <p>בתהליך</p>
            </div>
            <div class="stat-card closed">
                <h3 id="closedCount">0</h3>
                <p>נסגר</p>
            </div>
        </div>

        <div class="controls">
            <input type="text" id="searchFilter" placeholder="🔍 חיפוש מקום..." class="filter-input">
            <select id="cityFilter" class="filter-input">
                <option value="">כל הערים</option>
            </select>
            <select id="typeFilter" class="filter-input">
                <option value="">כל הסוגים</option>
            </select>
            <select id="statusFilter" class="filter-input">
                <option value="">כל הסטטוסים</option>
                <option value="pending">ממתין לפנייה</option>
                <option value="contacted">נוצר קשר</option>
                <option value="confirmed">בתהליך</option>
                <option value="closed">נסגר</option>
            </select>
            <select id="regionFilter" class="filter-input">
                <option value="">כל האזורים</option>
                <option value="צפון">צפון</option>
                <option value="מרכז">מרכז</option>
                <option value="דרום">דרום</option>
            </select>
			<div style="display: flex; gap: 8px;">
  <button onclick="setViewMode('grid')" class="btn btn-secondary" id="gridBtn">🔲 Grid</button>
  <button onclick="setViewMode('list')" class="btn btn-secondary" id="listBtn">📋 List</button>
</div>
        </div>

        <div id="venuesContainer">
            <!-- כאן יוצגו המקומות -->
        </div>
    </div>

    <div class="ai-assistant" onclick="openAiAssistant()">
        🤖 עוזר AI
    </div>

    <!-- Modal לעוזר AI -->
    <div id="aiModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAiAssistant()">&times;</span>
            <h2>🤖 עוזר AI לניהול הופעות</h2>
            <div id="aiSuggestions"></div>
        </div>
    </div>

    <!-- Modal להודעות -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeMessageModal()">&times;</span>
            <h2>✉️ הודעה מותאמת אישית</h2>
            <div id="messageContent"></div>
        </div>
    </div>
<!-- Modal הוספת מקום ידנית -->
<div id="addVenueModal" class="modal">
  <div class="modal-content">
    <span class="close" onclick="closeAddVenueModal()">&times;</span>
    <h2>➕ הוסף מקום חדש</h2>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
      <input type="text" id="manualName" placeholder="שם המקום *" style="padding:10px;border-radius:10px;border:1px solid #ccc">
      <input type="text" id="manualContact" placeholder="איש קשר" style="padding:10px;border-radius:10px;border:1px solid #ccc">
      <input type="text" id="manualPhone" placeholder="טלפון" style="padding:10px;border-radius:10px;border:1px solid #ccc">
      <input type="email" id="manualEmail" placeholder="אימייל" style="padding:10px;border-radius:10px;border:1px solid #ccc">
      <select id="manualType" style="padding:10px;border-radius:10px;border:1px solid #ccc">
        <option value="">בחר סוג מקום</option>
        <option>בר</option>
        <option>מסעדה</option>
        <option>בית קפה</option>
        <option>מלון</option>
        <option>אולם</option>
        <option>יקב</option>
        <option>גלריה</option>
        <option>אחר</option>
      </select>
      <input type="text" id="manualCity" placeholder="עיר" style="padding:10px;border-radius:10px;border:1px solid #ccc">
    </div>
    <br>
    <textarea id="manualNotes" placeholder="הערות..." style="width: 100%; height: 80px; padding: 10px; border-radius: 10px; border:1px solid #ccc;"></textarea>
    <br><br>
    <button onclick="addManualVenue()" class="btn btn-primary">✅ הוסף לרשימה</button>
  </div>
</div>

    <script>
        let venues = [];
        let filteredVenues = [];
		let viewMode = 'grid';
        let userSettings = {
            name: '',
            phone: '',
            email: ''
        };

        // טעינת הגדרות משתמש
        function loadUserSettings() {
            const saved = localStorage.getItem('gigBookingSettings');
            if (saved) {
                userSettings = JSON.parse(saved);
                document.getElementById('userName').value = userSettings.name || '';
                document.getElementById('userPhone').value = userSettings.phone || '';
                document.getElementById('userEmail').value = userSettings.email || '';
            }
        }

        // שמירת הגדרות משתמש
        function saveSettings() {
            userSettings.name = document.getElementById('userName').value;
            userSettings.phone = document.getElementById('userPhone').value;
            userSettings.email = document.getElementById('userEmail').value;
            
            localStorage.setItem('gigBookingSettings', JSON.stringify(userSettings));
            alert('✅ הגדרות נשמרו בהצלחה!');
        }
		
		// פונקציה לשינוי תצוגה
        function setViewMode(mode) {
        viewMode = mode;
        document.getElementById('gridBtn').style.opacity = (mode === 'grid') ? '1' : '0.6';
        document.getElementById('listBtn').style.opacity = (mode === 'list') ? '1' : '0.6';
        renderVenues();
        }

        // שמירת נתונים
        function saveData() {
            if (venues.length === 0) {
                alert('אין נתונים לשמירה');
                return;
            }
            
            const dataToSave = {
                venues: venues,
                timestamp: new Date().toLocaleString('he-IL')
            };
            
            localStorage.setItem('gigBookingData', JSON.stringify(dataToSave));
            alert('✅ הנתונים נשמרו בהצלחה!');
        }

        // טעינת נתונים שמורים
        function loadSavedData() {
            const savedData = localStorage.getItem('gigBookingData');
            if (!savedData) {
                alert('לא נמצאו נתונים שמורים');
                return;
            }
            
            try {
                const data = JSON.parse(savedData);
                venues = data.venues || [];
                filteredVenues = [...venues];
                
                updateFilters();
                renderVenues();
                updateStats();
                
                alert(`✅ נתונים נטענו בהצלחה!\nנשמר ב: ${data.timestamp}\nמספר מקומות: ${venues.length}`);
            } catch (error) {
                alert('שגיאה בטעינת הנתונים השמורים');
            }
        }

        // ייצוא נתונים ל-CSV
        function exportData() {
            if (venues.length === 0) {
                alert('אין נתונים לייצוא');
                return;
            }
            
            const csvContent = [
                headers.join(','),
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `venues_export_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
        }

        // מיפוי אזורים לפי ערים
        function getRegionByCity(city) {
            if (!city) return '';
            
            const cityLower = city.toLowerCase();
            
            // צפון
            const northCities = ['חיפה', 'נהריה', 'עכו', 'נצרת', 'טבריה', 'צפת', 'קריית שמונה', 'מעלות', 'כרמיאל', 'גליל', 'גולן', 'קרית אתא', 'קריית ביאליק', 'קריית ים', 'קריית מוצקין'];
            
            // מרכז
            const centerCities = ['תל אביב', 'ירושלים', 'פתח תקווה', 'רמת גן', 'בני ברק', 'חולון', 'בת ים', 'הרצליה', 'כפר סבא', 'רעננה', 'נתניה', 'מודיעין', 'רמלה', 'לוד', 'ראשון לציון', 'רחובות', 'קרית גת'];
            
            // דרום
            const southCities = ['באר שבע', 'אשדוד', 'אשקלון', 'אילת', 'דימונה', 'נתיבות', 'אופקים', 'ערד', 'מצפה רמון', 'יהוד'];
            
            for (let northCity of northCities) {
                if (cityLower.includes(northCity.toLowerCase())) return 'צפון';
            }
            
            for (let centerCity of centerCities) {
                if (cityLower.includes(centerCity.toLowerCase())) return 'מרכז';
            }
            
            for (let southCity of southCities) {
                if (cityLower.includes(southCity.toLowerCase())) return 'דרום';
            }
            
            return 'לא מוגדר';
        }

        // דמה נתונים ראשוניים
        const sampleData = `שם המקום,איש קשר,טלפון,אימייל,סוג מקום,עיר,הערות
יקב תל שיפון,,073-3859382,ortal.estatewinery@gmail.com,מבשלה / יקב,אורטל,
מקום השראה,יפעת גולן,052-6903503,info@makomhashraa.co.il,בית קפה,אלוני אבא (האלונים 3),
דרך הקפה,,054-6423441,,בית קפה,אלונים,
אלווה בר,,050-3583245,alvabar2014@gmail.com,בר / מסעדה,אשדות יעקב (איחוד - פארק אדיסון),
סלינה בית אורן,,,reception.mantur@selina.com,בר / בית קפה / מסעדה / בית מלון,בית אורן,`;

        function loadData() {
            const fileInput = document.getElementById('csvFile');
            const textInput = document.getElementById('csvData');
            
            let csvContent = '';
            
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    csvContent = e.target.result;
                    parseCSV(csvContent);
                };
                reader.readAsText(file);
            } else if (textInput.value.trim()) {
                csvContent = textInput.value.trim();
                parseCSV(csvContent);
            } else {
                // טען דמה נתונים לדוגמה
                parseCSV(sampleData);
            }
        }

        function parseCSV(csvContent) {
            const lines = csvContent.split('\n');
            const headers = lines[0].split(',');
            venues = [];

            for (let i = 1; i < lines.length; i++) {
                if (lines[i].trim()) {
                    const values = lines[i].split(',');
                    const venue = {
                        id: i,
                        name: values[0] || '',
                        contact: values[1] || '',
                        phone: values[2] || '',
                        email: values[3] || '',
                        type: values[4] || '',
                        city: values[5] || '',
                        notes: values[6] || '',
                        region: getRegionByCity(values[5] || ''),
                        status: 'pending',
                        lastContact: null,
                        nextFollowUp: null
                    };
                    venues.push(venue);
                }
            }

            filteredVenues = [...venues];
            updateFilters();
            renderVenues();
            updateStats();
        }

function renderVenues() {
  const container = document.getElementById('venuesContainer');
  container.innerHTML = '';

  if (viewMode === 'grid') {
    container.className = 'venues-grid';
  } else {
    container.className = ''; // אין עיצוב גריד בליסט
  }

  filteredVenues.forEach(venue => {
    const venueCard = document.createElement('div');
    venueCard.className = `venue-card ${venue.status}`;
    venueCard.style.cursor = 'pointer';

if (viewMode === 'grid') {
  venueCard.innerHTML = `
    <div class="venue-name">${venue.name}</div>
    ${getConversationIcon(venue.id)}
    <div class="venue-info">
      ${venue.contact ? `<div class="info-row">👤 ${venue.contact}</div>` : ''}
      ${venue.phone ? `<div class="info-row">📞 ${venue.phone}</div>` : ''}
      ${venue.email ? `<div class="info-row">📧 ${venue.email}</div>` : ''}
      ${venue.type ? `<div class="info-row">🏢 ${venue.type}</div>` : ''}
      ${venue.city ? `<div class="info-row">📍 ${venue.city}</div>` : ''}
      ${venue.region ? `<div class="info-row">🗺️ ${venue.region}</div>` : ''}
      ${venue.notes ? `<div class="info-row">📝 ${venue.notes}</div>` : ''}
    </div>
    <div class="actions">
      <select class="status-select" onchange="updateStatus(${venue.id}, this.value)">
        <option value="pending" ${venue.status === 'pending' ? 'selected' : ''}>ממתין לפנייה</option>
        <option value="contacted" ${venue.status === 'contacted' ? 'selected' : ''}>נוצר קשר</option>
        <option value="confirmed" ${venue.status === 'confirmed' ? 'selected' : ''}>בתהליך</option>
        <option value="closed" ${venue.status === 'closed' ? 'selected' : ''}>נסגר</option>
      </select>
      <button class="btn btn-primary" onclick="generateMessage(${venue.id})">✉️ צור הודעה</button>
      ${venue.phone ? `<button class="btn btn-secondary" onclick="callVenue('${venue.phone}')">📞 התקשר</button>` : ''}
      <button class="btn btn-secondary" onclick="openConversation(${venue.id})">🗣️ תיעוד שיחה</button>
    </div>
  `;
}

	else {
      // תצוגת LIST
      venueCard.style.display = 'flex';
      venueCard.style.flexDirection = 'row';
      venueCard.style.alignItems = 'center';
      venueCard.style.justifyContent = 'space-between';
      venueCard.style.padding = '15px';
      venueCard.style.marginBottom = '10px';

      venueCard.innerHTML = `
        <div>
          <div class="venue-name" style="margin-bottom:5px;">${venue.name}</div>
          <div class="info-row">${venue.contact || ''} • ${venue.phone || ''}</div>
          <div class="info-row">${venue.type || ''} • ${venue.city || ''}</div>
        </div>
        <div>
        </div>
      `;
    }

    container.appendChild(venueCard);
  });
}

        function updateStatus(venueId, newStatus) {
            const venue = venues.find(v => v.id === venueId);
            if (venue) {
                venue.status = newStatus;
                venue.lastContact = new Date().toLocaleDateString('he-IL');
                
                // קבע מועד מעקב הבא
                const followUpDays = {
                    'contacted': 3,
                    'confirmed': 7,
                    'closed': 0
                };
                
                if (followUpDays[newStatus] > 0) {
                    const followUp = new Date();
                    followUp.setDate(followUp.getDate() + followUpDays[newStatus]);
                    venue.nextFollowUp = followUp.toLocaleDateString('he-IL');
                }
                
                updateStats();
                renderVenues();
            }
        }

        function generateMessage(venueId) {
            const venue = venues.find(v => v.id === venueId);
            if (!venue) return;

            // ודא שיש הגדרות משתמש
            if (!userSettings.name) {
                alert('אנא הכנס את הפרטים האישיים שלך בחלק ההגדרות למעלה');
                return;
            }

            const messages = {
                initial: `שלום, ${venue.contact || 'מה שלומך?'}

אני ${userSettings.name}, מוזיקאי מקצועי עם ניסיון עשיר בהופעות.

ראיתי את ${venue.name} ואני מאמין שהמקום שלכם יהיה מושלם לקהל שלי.

אני מציע הופעה איכותית שתוסיף אווירה מיוחדת למקום:
🎵 רפרטואר מגוון ומותאם לקהל
🎤 ציוד מקצועי ואיכותי  
⭐ המלצות מעולות ממקומות קודמים

אשמח לתאם פגישה קצרה או שיחת טלפון לפרטים.

בכבוד רב,
${userSettings.name}
${userSettings.phone}
${userSettings.email}`,

                followUp: `שלום שוב,

רציתי לעקוב אחרי ההודעה ששלחתי לפני כמה ימים בנוגע להופעה ב-${venue.name}.

אני זמין לכל שאלה או הבהרה נוספת.

האם נוכל לתאם שיחה קצרה השבוע?

תודה רבה,
${userSettings.name}
${userSettings.phone}`
            };

            const messageType = venue.status === 'pending' ? 'initial' : 'followUp';
            const message = messages[messageType];

            document.getElementById('messageContent').innerHTML = `
                <h3>${venue.name}</h3>
                <textarea id="messageText" style="width: 100%; height: 300px; padding: 15px; border-radius: 10px; border: 2px solid #ddd;">${message}</textarea>
                <br><br>
                <button class="btn btn-primary" onclick="copyMessage(this)">📋 העתק הודעה</button>
                ${venue.email ? `<button class="btn btn-secondary" onclick="openEmail('${venue.email}', '${encodeURIComponent('הצעה להופעה ב-' + venue.name)}', '${encodeURIComponent(message)}')">📧 שלח באימייל</button>` : ''}
                ${venue.phone ? `<button class="btn btn-secondary" onclick="openWhatsApp('${venue.phone}', '${encodeURIComponent(message)}')">💬 שלח בוואטסאפ</button>` : ''}
            `;
            
            document.getElementById('messageModal').style.display = 'block';
        }

        function copyMessage(button) {
            const textarea = document.getElementById('messageText');
            textarea.select();
            document.execCommand('copy');
            button.textContent = '✅ הועתק!';
            setTimeout(() => {
                button.textContent = '📋 העתק הודעה';
            }, 2000);
        }

        function openEmail(email, subject, body) {
            window.open(`mailto:${email}?subject=${subject}&body=${body}`);
        }

        function openWhatsApp(phone, message) {
            const cleanPhone = phone.replace(/[^0-9]/g, '');
            const whatsappUrl = `https://wa.me/972${cleanPhone.startsWith('0') ? cleanPhone.substring(1) : cleanPhone}?text=${message}`;
            window.open(whatsappUrl);
        }

        function callVenue(phone) {
            if (confirm(`התקשר ל-${phone}?`)) {
                window.open(`tel:${phone}`);
            }
        }

        function updateFilters() {
            // עדכן מסנני עיר
            const cities = [...new Set(venues.map(v => v.city).filter(c => c))];
            const cityFilter = document.getElementById('cityFilter');
            cityFilter.innerHTML = '<option value="">כל הערים</option>';
            cities.forEach(city => {
                cityFilter.innerHTML += `<option value="${city}">${city}</option>`;
            });

            // עדכן מסנני סוג
            const types = [...new Set(venues.map(v => v.type).filter(t => t))];
            const typeFilter = document.getElementById('typeFilter');
            typeFilter.innerHTML = '<option value="">כל הסוגים</option>';
            types.forEach(type => {
                typeFilter.innerHTML += `<option value="${type}">${type}</option>`;
            });
        }

        function updateStats() {
            const stats = venues.reduce((acc, venue) => {
                acc[venue.status] = (acc[venue.status] || 0) + 1;
                return acc;
            }, {});

            document.getElementById('pendingCount').textContent = stats.pending || 0;
            document.getElementById('contactedCount').textContent = stats.contacted || 0;
            document.getElementById('confirmedCount').textContent = stats.confirmed || 0;
            document.getElementById('closedCount').textContent = stats.closed || 0;
        }

        function applyFilters() {
            const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
            const cityFilter = document.getElementById('cityFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const regionFilter = document.getElementById('regionFilter').value;

            filteredVenues = venues.filter(venue => {
                return (!searchFilter || venue.name.toLowerCase().includes(searchFilter)) &&
                       (!cityFilter || venue.city === cityFilter) &&
                       (!typeFilter || venue.type === typeFilter) &&
                       (!statusFilter || venue.status === statusFilter) &&
                       (!regionFilter || venue.region === regionFilter);
            });

            renderVenues();
        }

        function openAiAssistant() {
            const suggestions = [
                "🎯 המקומות עם הפוטנציאל הגבוה ביותר השבוע",
                "📈 ניתוח ביצועים - אילו גישות עובדות הכי טוב",
                "⏰ תזכורות מעקב - למי כדאי לחזור היום",
                "💬 טיפים לשיפור הודעות",
                "📊 דוח התקדמות שבועי"
            ];

            document.getElementById('aiSuggestions').innerHTML = `
                <p>איך אני יכול לעזור לך להצליח יותר בסגירת הופעות?</p>
                <ul>
                    ${suggestions.map(s => `<li style="margin: 10px 0; cursor: pointer; padding: 10px; background: #f8f9fa; border-radius: 5px;" onclick="handleAiSuggestion('${s}')">${s}</li>`).join('')}
                </ul>
            `;
            
            document.getElementById('aiModal').style.display = 'block';
        }

        function handleAiSuggestion(suggestion) {
            // כאן תוכל להוסיף לוגיקה מתקדמת יותר
            alert('תכונה זו תפותח בהמשך - ' + suggestion);
        }

        function closeAiAssistant() {
            document.getElementById('aiModal').style.display = 'none';
        }

        function closeMessageModal() {
            document.getElementById('messageModal').style.display = 'none';
        }

function openConversation(venueId) {
    currentConversationVenueId = venueId;
    const historyDiv = document.getElementById('conversationHistory');
    const data = JSON.parse(localStorage.getItem('venueChats') || '{}');
    const history = data[venueId] || [];
    
    historyDiv.innerHTML = history.map(chat => `
        <div style="margin-bottom: 8px;">
          <div style="font-size: 0.85em; color: gray;">📅 ${chat.time}</div>
          <div>${chat.text}</div>
        </div>
    `).join('') || '<div>אין תיעוד קודם</div>';
    
    document.getElementById('conversationText').value = '';
    document.getElementById('conversationModal').style.display = 'block';
}

function closeConversationModal() {
    document.getElementById('conversationModal').style.display = 'none';
}

function saveConversation() {
    const text = document.getElementById('conversationText').value.trim();
    if (!text) {
        alert('לא ניתן לשמור שיחה ריקה');
        return;
    }

    const data = JSON.parse(localStorage.getItem('venueChats') || '{}');
    if (!data[currentConversationVenueId]) data[currentConversationVenueId] = [];

    data[currentConversationVenueId].push({
        text,
        time: new Date().toLocaleString('he-IL')
    });

    localStorage.setItem('venueChats', JSON.stringify(data));
    closeConversationModal();
    renderVenues();
}

// סימן של תיעוד שיחה
function getConversationIcon(venueId) {
    const data = JSON.parse(localStorage.getItem('venueChats') || '{}');
    if (data[venueId] && data[venueId].length > 0) {
        return `<div class="chat-icon" title="יש תיעוד שיחה">💬</div>`;
    }
    return '';
}

let currentConversationVenueId = null;

        // Event listeners
        document.getElementById('searchFilter').addEventListener('input', applyFilters);
        document.getElementById('cityFilter').addEventListener('change', applyFilters);
        document.getElementById('typeFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('regionFilter').addEventListener('change', applyFilters);

        // אתחול המערכת
        window.onload = function() {
            loadUserSettings();
            updateStats();
        };

        // סגירת מודלים עם ESC
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeAiAssistant();
                closeMessageModal();
            }
        });

function openAddVenueModal() {
  document.getElementById('addVenueModal').style.display = 'block';
}
function closeAddVenueModal() {
  document.getElementById('addVenueModal').style.display = 'none';
}
function addManualVenue() {
  const name = document.getElementById('manualName').value.trim();
  if (!name) {
    alert('חובה להזין שם מקום');
    return;
  }
  const newVenue = {
    id: Date.now(),
    name,
    contact: document.getElementById('manualContact').value.trim(),
    phone: document.getElementById('manualPhone').value.trim(),
    email: document.getElementById('manualEmail').value.trim(),
    type: document.getElementById('manualType').value,
    city: document.getElementById('manualCity').value.trim(),
    notes: document.getElementById('manualNotes').value.trim(),
    region: getRegionByCity(document.getElementById('manualCity').value.trim()),
    status: 'pending',
    lastContact: null,
    nextFollowUp: null
  };
  venues.push(newVenue);
  filteredVenues = [...venues];
  updateFilters();
  renderVenues();
  updateStats();
  closeAddVenueModal();
}

        // סגירת מודלים בלחיצה מחוץ לתוכן
        window.onclick = function(event) {
            const aiModal = document.getElementById('aiModal');
            const messageModal = document.getElementById('messageModal');
            
            if (event.target === aiModal) {
                closeAiAssistant();
            }
            if (event.target === messageModal) {
                closeMessageModal();
            }
			    const conversationModal = document.getElementById('conversationModal');
            if (event.target === conversationModal) {
                closeConversationModal();
            }
        };
    </script>
</body>
</html>
